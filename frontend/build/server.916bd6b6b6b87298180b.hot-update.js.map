{"version":3,"file":"server.916bd6b6b6b87298180b.hot-update.js","sources":["webpack:///./src/customizations/components/theme/Breadcrumbs/Breadcrumbs.jsx"],"sourcesContent":["/**\n * Breadcrumbs components.\n * @module components/theme/Breadcrumbs/Breadcrumbs\n */\nimport '@plone/volto/config';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, Container, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport { getBreadcrumbs } from '@plone/volto/actions';\nimport { getBaseUrl, hasApiExpander } from '@plone/volto/helpers';\nimport { BsChevronCompactRight } from 'react-icons/bs';\nimport NavItems from '@plone/volto/components/theme/Navigation/NavItems';\nimport { getNavigation } from '@plone/volto/actions';\nimport { Dropdown, Menu, Accordion, Form } from 'semantic-ui-react';\nimport { FaChevronDown } from 'react-icons/fa';\nimport { Navigation } from '@plone/volto/components';\n\nimport homeSVG from '@plone/volto/icons/home.svg';\n\nconst messages = defineMessages({\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n  breadcrumbs: {\n    id: 'Breadcrumbs',\n    defaultMessage: 'Breadcrumbs',\n  },\n});\n\nlet menuArray=[];\n\n\n/**\n * Breadcrumbs container class.\n */\nexport class BreadcrumbsComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   * \n   */\n\n  static propTypes = {\n    getBreadcrumbs: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    root: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    navItems: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  \n\n  componentDidMount() {\n    if (!hasApiExpander('breadcrumbs', getBaseUrl(this.props.pathname))) {\n      this.props.getBreadcrumbs(getBaseUrl(this.props.pathname));\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      if (!hasApiExpander('breadcrumbs', getBaseUrl(this.props.pathname))) {\n        this.props.getBreadcrumbs(getBaseUrl(nextProps.pathname));\n      }\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Segment\n        role=\"navigation\"\n        aria-label={this.props.intl.formatMessage(messages.breadcrumbs)}\n        className=\"breadcrumbs\"\n        secondary\n        vertical\n      >\n        <Container id=\"crumbcontainer\">\n          <Breadcrumb id=\"folderMap\">\n            {/* <Link\n              to={this.props.root || '/'}\n              className=\"section\"\n              title={this.props.intl.formatMessage(messages.home)}\n            >\n              <Icon name={homeSVG} size=\"25px\" />\n            </Link> */}\n\n            {console.log(this.props.menuItems)}\n            {/* {this.props.items.map((item, index, items) => [\n              index != 0 ? (\n                index <= 2 ? (\n                  <Link key={item.url} to={item.url} className=\"section\">\n                    {item.title}\n                    {console.log(items)}\n                    <span>&nbsp;</span>\n                  </Link>\n                ) : index > 2 ? (\n                  <Breadcrumb.Section\n                    className=\"crumbcontainer\"\n                    key={item.url}\n                    active\n                  >\n                    <Breadcrumb.Divider className=\"breaddivider\">\n                      <BsChevronCompactRight\n                        stroke=\"white\"\n                        fill=\"currentColor\"\n                        strokeWidth=\"0.5\"\n                      />\n                    </Breadcrumb.Divider>\n                    <div className=\"breadtitle\"><span>{item.title}</span></div>\n                  </Breadcrumb.Section>\n                ) : (\n                  ''\n                )\n              ) : (\n                ''\n              ),\n            ])} */}\n\n                {this.props.menuItems['@type'] == 'Document' ?\n                  <Breadcrumb.Section\n                    className=\"crumbcontainer\"\n                    key={this.props.menuItems.parent['@url']}\n                    active\n                    >\n                    <Link key={this.props.menuItems.parent['@url']} to={this.props.menuItems.parent['@url']} className=\"section\">\n                      {this.props.menuItems.parent.title}\n                      <span>&nbsp;</span>\n                    </Link>\n                  </Breadcrumb.Section>\n                  : ''}\n\n\n\n                  <Breadcrumb.Section\n                    className=\"crumbcontainer\"\n                    key={this.props.menuItems['@url']}\n                    active\n                  >\n                    \n                    <div className=\"breadtitle\"><span>{this.props.menuItems.title}</span></div>\n                  </Breadcrumb.Section>\n          </Breadcrumb>\n          <Container id=\"dropdowncontainer\">\n            <div id=\"inhoud\">\n              <Dropdown\n                item\n                simple\n                text={\n                  this.props.items.length > 4\n                    ? this.props.items[2].title\n                    : 'INHOUD'\n                }\n                icon={<FaChevronDown color=\"#808080\" />}\n              >\n                \n                <Dropdown.Menu className=\"dropdownContentPage\">\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a\n                      href={\n                        this.props.items.length != undefined && this.props.items.length > 2 ?\n                        (this.props.menuItems.['@type'] == 'Document' ?\n                           this.props.items[this.props.items.length - 2].url\n                          : this.props.items[this.props.items.length - 1].url ) : ''\n                      }\n                    >\n                      Beeldimpressie\n                    </a>\n                    \n                  </Dropdown.Item> \n\n                  {(() => {\n                    \n                    if(this.props.menuItems.['@type'] == \"Document\"){\n                      let steps = this.props.items;\n                      let nav = this.props.navItems;\n                      let depth = 0;\n                      let parentTitle = this.props.menuItems.parent.title;\n                      \n\n                      for (let item1 of nav) {\n                        if (item1.title == parentTitle) {\n                          menuArray=item1.items;\n                          break;\n                        }\n                        for (let item2 of item1.items) {\n                          if (item2.title == parentTitle) {\n                            menuArray = item2.items;\n                            break;\n                          }\n                          for (let item3 of item2.items) {\n                            if (item3.title == parentTitle) {\n                              menuArray=item3.items;\n                              break;\n                            }\n                            for (let item4 of item3.items) {\n                              if (item4.title == parentTitle) {\n                                menuArray=item4.items;\n                                break;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }else{\n                      menuArray=[]\n                      for(let item of this.props.menuItems.items){\n                        if(menuArray.includes(item) == false){\n                          menuArray.push(item)\n                          // console.log(menuArray)\n                        }\n                      }\n                    }\n                  })()}\n\n\n                  {[...menuArray].map((x, i) => (\n                  <Dropdown.Item key={i} id=\"InhoudDropdown\">\n                    <a href={x.url}>{x.title}</a>\n                  </Dropdown.Item>\n                  ))}\n\n\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n          </Container>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      navItems: state.navigation.items,\n      items: state.breadcrumbs.items,\n      root: state.breadcrumbs.root,\n    }),\n    { getBreadcrumbs },\n  ),\n)(BreadcrumbsComponent);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AAWA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AA2CA;AAEA;AAHA;AAKA;AAAA;AAAA;AAEA;AAAA;AAFA;AALA;AAeA;AAEA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AANA;AAxDA;AAiEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AARA;AAWA;AAAA;AACA;AAAA;AAEA;AADA;AAAA;AADA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AADA;AA7DA;AAXA;AADA;AADA;AAlEA;AAPA;AAgKA;AACA;AAxNA;AACA;AADA;AASA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AAEA;AACA;AAFA;AAXA;AACA;AAiNA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;;;;A","sourceRoot":""}