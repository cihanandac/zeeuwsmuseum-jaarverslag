{"version":3,"file":"server.528d1cde2eef2086c8bb.hot-update.js","sources":["webpack:///./node_modules/@plone/volto/src/components/theme/Navigation/ContextNavigation.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Navigation/withContentNavigation.js","webpack:///./src/customizations/components/theme/Header/Header.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { List, Image } from 'semantic-ui-react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport cx from 'classnames';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { Icon, UniversalLink } from '@plone/volto/components';\nimport { withContentNavigation } from './withContentNavigation';\n\nimport leftIcon from '@plone/volto/icons/left-key.svg';\n\nconst messages = defineMessages({\n  navigation: {\n    id: 'Navigation',\n    defaultMessage: 'Navigation',\n  },\n});\n\nfunction renderNode(node, parentLevel) {\n  const level = parentLevel + 1;\n  return (\n    <List.Item\n      key={node['@id']}\n      active={node.is_current}\n      className={`level-${level}`}\n    >\n      <List.Content>\n        {node.type !== 'link' ? (\n          <RouterLink\n            to={flattenToAppURL(node.href)}\n            title={node.description}\n            className={cx(`contenttype-${node.type}`, {\n              in_path: node.is_in_path,\n            })}\n          >\n            {node.thumb ? <Image src={flattenToAppURL(node.thumb)} /> : ''}\n            {node.title}\n            {node.is_current ? (\n              <List.Content className=\"active-indicator\">\n                <Icon name={leftIcon} size=\"30px\" />\n              </List.Content>\n            ) : (\n              ''\n            )}\n          </RouterLink>\n        ) : (\n          <UniversalLink href={flattenToAppURL(node.href)}>\n            {node.title}\n          </UniversalLink>\n        )}\n        {(node.items?.length && (\n          <List.List>\n            {node.items.map((node) => renderNode(node, level))}\n          </List.List>\n        )) ||\n          ''}\n      </List.Content>\n    </List.Item>\n  );\n}\n\n/**\n * A navigation slot implementation, similar to the classic Plone navigation\n * portlet. It uses the same API, so the options are similar to\n * INavigationPortlet\n */\nexport function ContextNavigationComponent(props) {\n  const { navigation = {} } = props;\n  const { items = [] } = navigation;\n  const intl = useIntl();\n\n  return items.length ? (\n    <nav className=\"context-navigation\">\n      {navigation.has_custom_name ? (\n        <div className=\"context-navigation-header\">\n          <RouterLink to={flattenToAppURL(navigation.url || '')}>\n            {navigation.title}\n          </RouterLink>\n        </div>\n      ) : (\n        <div className=\"context-navigation-header\">\n          {intl.formatMessage(messages.navigation)}\n        </div>\n      )}\n      <List>{items.map((node) => renderNode(node, 0))}</List>\n    </nav>\n  ) : (\n    ''\n  );\n}\n\nContextNavigationComponent.propTypes = {\n  /**\n   * Navigation tree returned from @contextnavigation restapi endpoint\n   */\n  navigation: PropTypes.shape({\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ),\n    has_custom_name: PropTypes.bool,\n    title: PropTypes.string,\n  }),\n};\n\nexport default compose(\n  withRouter,\n  withContentNavigation,\n)(ContextNavigationComponent);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { getContextNavigation } from '@plone/volto/actions';\n\nexport function withContentNavigation(WrappedComponent) {\n  /**\n   * Options passed in params can be:\n   *\n   * - name - The title of the navigation tree.\n   * - root_path - Root node path, can be \"frontend path\", derived from router\n   * - includeTop - Bool, Include top nodeschema\n   * - currentFolderOnly - Bool, Only show the contents of the current folder.\n   * - topLevel - Int, Start level\n   * - bottomLevel - Int, Navigation tree depth\n   * - no_icons - Bool, Suppress Icons\n   * - thumb_scale - String, Override thumb scale\n   * - no_thumbs = Bool, Suppress thumbs\n   *\n   */\n  function Wrapped(props) {\n    const {\n      location,\n      pathname = getBaseUrl(location.pathname),\n      params = {},\n    } = props;\n\n    let qs = Object.keys(params)\n      .sort()\n      .map((key) => `expand.contextnavigation.${key}=${params[key]}`)\n      .join('&');\n    const path = `${pathname}${\n      pathname.endsWith('/') ? '' : '/'\n    }@contextnavigation${qs ? `?${qs}` : ''}`;\n\n    const dispatch = useDispatch();\n    const nav = useSelector((state) => {\n      return state.contextNavigation?.[path]?.data;\n    });\n\n    useDeepCompareEffect(() => {\n      dispatch(getContextNavigation(pathname, params));\n    }, [pathname, dispatch, params]);\n\n    return <WrappedComponent {...props} navigation={nav} />;\n  }\n\n  Wrapped.propTypes = {\n    /**\n     * Location, from router\n     */\n    location: PropTypes.shape({\n      pathname: PropTypes.string,\n    }),\n    /**\n     * Parameters passed to the @contextnavigation endpoint\n     */\n    params: PropTypes.shape({\n      name: PropTypes.string,\n      root_path: PropTypes.string,\n      includeTop: PropTypes.bool,\n      currentFolderOnly: PropTypes.bool,\n      topLevel: PropTypes.number,\n      bottomLevel: PropTypes.number,\n      no_icons: PropTypes.bool,\n      thumb_scale: PropTypes.string,\n      no_thumbs: PropTypes.bool,\n    }),\n  };\n\n  Wrapped.displayName = `WithContextNavigation(${getDisplayName(\n    WrappedComponent,\n  )})`;\n\n  return Wrapped;\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n","/**\n * Header component.\n * @module components/theme/Header/Header\n */\nimport ContextNavigation from '@plone/volto/components/theme/Navigation/ContextNavigation';\n\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { getNavigation } from '@plone/volto/actions';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Container, Segment } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport {\n  Anontools,\n  LanguageSelector,\n  Logo,\n  Navigation,\n  SearchWidget,\n  Breadcrumbs,\n  NavItems,\n} from '@plone/volto/components';\n\nfunction useScrollDirection() {\n  const [scrollDirection, setScrollDirection] = useState(null);\n\n  useEffect(() => {\n    let lastScrollY = window.pageYOffset;\n\n    const updateScrollDirection = () => {\n      const scrollY = window.pageYOffset;\n      const direction = scrollY > lastScrollY ? 'down' : 'up';\n      if (\n        direction !== scrollDirection &&\n        (scrollY - lastScrollY > 30 || scrollY - lastScrollY < -10)\n      ) {\n        setScrollDirection(direction);\n      }\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n    };\n    window.addEventListener('scroll', updateScrollDirection); // add event listener\n    return () => {\n      window.removeEventListener('scroll', updateScrollDirection); // clean up\n    };\n  }, [scrollDirection]);\n\n  return scrollDirection;\n}\n\n/**\n * Header component class.\n * @class Header\n * @extends Component\n */\n\nconst Header = (props) => {\n  /**\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n  const scrollDirection = useScrollDirection();\n  const menuItems = props.menuItems;\n  const { settings } = config;\n\n  return (\n    <Segment\n      basic\n      className={`header-wrapper ${\n        scrollDirection === 'down' ? 'hide' : 'show'\n      }`}\n      id=\"header-wrapper\"\n      role=\"banner\"\n    >\n      <Container className=\"header-container\">\n        <div className=\"header\">\n          <div className=\"logo-nav-wrapper\">\n            <div className=\"logo\">\n              <a className=\"logo-written\" id=\"writtenlogo\" href=\"/\">\n                ZEEUWS MUSEUM\n              </a>\n            </div>\n\n            {/* This section is for the rest of the menu */}\n            <Navigation pathname={props.pathname} />\n            {console.log(\n              <ContextNavigation\n                pathname={props.pathname}\n                params={{ currentFolderOnly: false }}\n              />,\n            )}\n          </div>\n        </div>\n      </Container>\n      <Breadcrumbs pathname={props.pathname} menuItems={props.menuItems} />\n    </Segment>\n  );\n};\n\nexport default (connect(\n  (state) => ({\n    token: state.userSession.token,\n    items: state,\n  }),\n  { getNavigation },)\n)(Header);\n\nHeader.propTypes = {\n  getNavigation: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n};\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAMA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAHA;AAKA;AAGA;AACA;AACA;AACA;AADA;AAHA;AAOA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAVA;AAkBA;AAAA;AAAA;AAKA;AAAA;AAzBA;AALA;AAsCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAIA;AAAA;AAZA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AARA;AAJA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAIA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAVA;AAuBA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAGA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAVA;AADA;AADA;AAoBA;AAAA;AAAA;AA5BA;AA+BA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AAFA;;;;A","sourceRoot":""}