{"version":3,"file":"server.4446821e79052999f904.hot-update.js","sources":["webpack:///./node_modules/@kitconcept/volto-slider-block/src/components/View.jsx"],"sourcesContent":["import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport Slider from 'react-slick';\nimport cx from 'classnames';\nimport { defineMessages, useIntl } from 'react-intl';\nimport Body from './Body';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport leftArrowSVG from '@plone/volto/icons/left-key.svg';\nimport teaserTemplate from '../icons/teaser-template.svg';\n\nconst messages = defineMessages({\n  PleaseChooseContent: {\n    id: 'Please choose an existing content as source for this element',\n    defaultMessage:\n      'Please choose an existing content as source for this element',\n  },\n});\n\nconst PrevArrow = ({ className, style, onClick }) => (\n  <button\n    className={className}\n    style={{ ...style, display: 'block' }}\n    onClick={onClick}\n  >\n    <Icon name={leftArrowSVG} size=\"48px\" />\n  </button>\n);\n\nconst NextArrow = ({ className, style, onClick }) => (\n  <button\n    className={className}\n    style={{ ...style, display: 'block' }}\n    onClick={onClick}\n  >\n    <Icon name={rightArrowSVG} size=\"48px\" />\n  </button>\n);\n\nconst SliderView = (props) => {\n  const {\n    className,\n    data,\n    isEditMode,\n    block,\n    openObjectBrowser,\n    onChangeBlock,\n    slideIndex,\n    setSlideIndex,\n  } = props;\n  const intl = useIntl();\n\n  const sliderRef = React.useRef();\n\n  if (sliderRef.current && isEditMode) {\n    // This syncs the current slide with the objectwidget (or other sources\n    // able to access the slider context)\n    // that can modify the SliderContext (and come here via props slideIndex)\n    sliderRef.current.slickGoTo(slideIndex);\n  }\n\n  return (\n    <div className={cx('block slider', className)}>\n      {(data.slides?.length === 0 || !data.slides) && isEditMode && (\n        <Message>\n          <div className=\"teaser-item default\">\n            <img src={teaserTemplate} alt=\"\" />\n            <p>{intl.formatMessage(messages.PleaseChooseContent)}</p>\n          </div>\n        </Message>\n      )}\n      {data.slides?.length > 0 && (\n        <Slider\n          ref={sliderRef}\n          dots\n          infinite\n          speed={500}\n          slidesToShow={1}\n          slidesToScroll={1}\n          draggable={false}\n          nextArrow={<NextArrow />}\n          prevArrow={<PrevArrow />}\n          // slideWidth=\"1200px\"\n          // This syncs the current slide with the SliderContext state\n          // responding to the slide change event from the slider itself\n          // (the dots or the arrows)\n          // There's also the option of doing it before instead than after:\n          // beforeChange={(current, next) => setSlideIndex(next)}\n          afterChange={(current) => isEditMode && setSlideIndex(current)}\n        >\n          {data.slides &&\n            data.slides.map((item, index) => (\n              <div key={item['@id']}>\n                <Body\n                  {...props}\n                  key={item['@id']}\n                  data={item}\n                  isEditMode={isEditMode}\n                  dataBlock={data}\n                  index={index}\n                  block={block}\n                  openObjectBrowser={openObjectBrowser}\n                  onChangeBlock={onChangeBlock}\n                />\n              </div>\n            ))}\n        </Slider>\n      )}\n    </div>\n  );\n};\n\nexport default withBlockExtensions(SliderView);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AAAA;AAAA;AALA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AAAA;AAAA;AALA;AACA;AAQA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAFA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AAhBA;AAoBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AApBA;AAVA;AAgDA;AACA;AACA;;;;A","sourceRoot":""}