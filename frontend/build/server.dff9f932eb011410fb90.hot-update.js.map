{"version":3,"file":"server.dff9f932eb011410fb90.hot-update.js","sources":["webpack:///./src/customizations/components/theme/Navigation/Navigation.jsx","webpack:///external \"lodash/isMatch\""],"sourcesContent":["/**\n * Navigation components.\n * @module components/theme/Navigation/Navigation\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { isMatch } from 'lodash';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Menu, Dropdown, Button } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { getBaseUrl, flattenToAppURL } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { getNavigation } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  closeMobileMenu: {\n    id: 'Close menu',\n    defaultMessage: 'Close menu',\n  },\n  openMobileMenu: {\n    id: 'Open menu',\n    defaultMessage: 'Open menu',\n  },\n});\n\n/**\n * Navigation container class.\n * @class Navigation\n * @extends Component\n */\nclass Navigation extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getNavigation: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n        items: PropTypes.array,\n        review_state: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Navigation\n   */\n  constructor(props) {\n    super(props);\n    this.toggleMobileMenu = this.toggleMobileMenu.bind(this);\n    this.closeMobileMenu = this.closeMobileMenu.bind(this);\n    this.state = {\n      isMobileMenuOpen: false,\n    };\n    this.container = React.createRef();\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getNavigation(\n      getBaseUrl(this.props.pathname),\n      config.settings?.navDepth || 3,\n    );\n  }\n\n  handleClickOutsideNav = (event) => {\n    if (\n      this.container.current &&\n      !this.container.current.contains(event.target)\n    ) {\n      this.setState({\n        isMobileMenuOpen: false,\n      });\n    }\n  };\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentDidUpdate(nextProps) {\n    if (\n      nextProps.pathname !== this.props.pathname ||\n      nextProps.userToken !== this.props.userToken\n    ) {\n      this.props.getNavigation(\n        getBaseUrl(nextProps.pathname),\n        config.settings?.navDepth || 3,\n      );\n      this.closeMobileMenu();\n    }\n\n    // Hide submenu on route change\n    if (document.querySelector('body')) {\n      document.querySelector('body').click();\n    }\n  }\n\n  /**\n   * Check if menu is active\n   * @method isActive\n   * @param {string} url Url of the navigation item.\n   * @returns {bool} Is menu active?\n   */\n  isActive(url) {\n    return (\n      (url === '' && this.props.pathname === '/') ||\n      (url !== '' && isMatch(this.props.pathname.split('/'), url.split('/')))\n    );\n  }\n\n  /**\n   * Toggle mobile menu's open state\n   * @method toggleMobileMenu\n   * @returns {undefined}\n   */\n  toggleMobileMenu() {\n    this.setState({ isMobileMenuOpen: !this.state.isMobileMenuOpen }, () => {\n      if (this.state.isMobileMenuOpen) {\n        document.addEventListener('mousedown', this.handleClickOutsideNav);\n      }\n    });\n  }\n\n  /**\n   * Close mobile menu\n   * @method closeMobileMenu\n   * @returns {undefined}\n   */\n  closeMobileMenu() {\n    if (!this.state.isMobileMenuOpen) {\n      return;\n    }\n    this.setState({ isMobileMenuOpen: false }, () => {\n      document.removeEventListener('mousedown', this.handleClickOutsideNav);\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <nav className=\"navigation\" ref={this.container}>\n        {!this.state.isMobileMenuOpen && (\n          <div className=\"hamburger-wrapper mobile only\">\n            <button\n              className={cx('hamburger hamburger--collapse', {\n                'is-active': this.state.isMobileMenuOpen,\n              })}\n              aria-label={\n                this.state.isMobileMenuOpen\n                  ? this.props.intl.formatMessage(messages.closeMobileMenu, {\n                      type: this.props.type,\n                    })\n                  : this.props.intl.formatMessage(messages.openMobileMenu, {\n                      type: this.props.type,\n                    })\n              }\n              title={\n                this.state.isMobileMenuOpen\n                  ? this.props.intl.formatMessage(messages.closeMobileMenu, {\n                      type: this.props.type,\n                    })\n                  : this.props.intl.formatMessage(messages.openMobileMenu, {\n                      type: this.props.type,\n                    })\n              }\n              type=\"button\"\n              onClick={this.toggleMobileMenu}\n            >\n              <span className=\"hamburger-box\">\n                <span className=\"hamburger-inner\" />\n              </span>\n            </button>\n          </div>\n        )}\n\n        <Menu\n          stackable\n          pointing\n          secondary\n          className={\n            this.state.isMobileMenuOpen\n              ? 'open'\n              : 'tablet computer large screen widescreen only'\n          }\n          // onClick={this.closeMobileMenu}\n          // onBlur={() => this.closeMobileMenu}\n        >\n          <Button\n            icon\n            basic\n            title=\"Close menu\"\n            className=\"close-button\"\n            onClick={this.closeMobileMenu}\n          >\n            <Icon name={clearSVG} size=\"37px\" />\n          </Button>\n\n          {this.props.items.map((item) => {\n            const flatUrl = flattenToAppURL(item.url);\n            const draftItem = item.review_state === 'draft';\n            return item.items && item.items.length ? (\n              <Dropdown\n                item\n                simple\n                className={\n                  this.isActive(flatUrl)\n                    ? 'item firstLevel menuActive'\n                    : 'item firstLevel'\n                }\n                key={flatUrl}\n                closeOnBlur={this.state.isMobileMenuOpen ? false : true}\n                trigger={\n                  <Link\n                    className={draftItem ? 'disabled' : ''}\n                    to={flatUrl === '' ? '/' : flatUrl}\n                    key={flatUrl}\n                    onClick={(e) => {\n                      if (draftItem) e.preventDefault();\n                    }}\n                  >\n                    {item.title}\n                  </Link>\n                }\n              >\n                <Dropdown.Menu>\n                  {item.items.map((subitem) => {\n                    const flatSubUrl = flattenToAppURL(subitem.url);\n                    const subDraftItem = subitem.review_state === 'draft';\n                    return (\n                      <Dropdown.Item key={flatSubUrl}>\n                        {subitem.title\n                          .toLowerCase()\n                          .includes('country profiles') ? (\n                          <>\n                            <div className=\"secondLevel-wrapper\">\n                              <Link\n                                to={flatSubUrl === '' ? '/' : flatSubUrl}\n                                key={flatSubUrl}\n                                className={cx('item secondLevel', {\n                                  menuActive: this.isActive(flatSubUrl),\n                                  disabled: subDraftItem,\n                                })}\n                                onClick={(e) => {\n                                  if (subDraftItem) e.preventDefault();\n                                }}\n                              >\n                                {subitem.title}\n                              </Link>\n                            </div>\n                            {subitem.items && subitem.items.length > 0 && (\n                              <div className=\"submenu-wrapper\">\n                                <div className=\"submenu countries-submenu\">\n                                  {subitem.items.map((subsubitem) => {\n                                    const flatSubSubUrl = flattenToAppURL(\n                                      subsubitem.url,\n                                    );\n                                    const subSubDraftItem =\n                                      subsubitem.review_state === 'draft';\n                                    return (\n                                      <Link\n                                        to={\n                                          flatSubSubUrl === ''\n                                            ? '/'\n                                            : flatSubSubUrl\n                                        }\n                                        title={subsubitem.title}\n                                        key={flatSubSubUrl}\n                                        className={cx('item thirdLevel', {\n                                          menuActive: this.isActive(flatSubUrl),\n                                          disabled: subSubDraftItem,\n                                        })}\n                                        onClick={(e) => {\n                                          if (subSubDraftItem)\n                                            e.preventDefault();\n                                        }}\n                                      >\n                                        {subsubitem.title}\n                                      </Link>\n                                    );\n                                  })}\n                                </div>\n                              </div>\n                            )}\n                          </>\n                        ) : (\n                          <>\n                            <div className=\"secondLevel-wrapper\">\n                              <Link\n                                to={flatSubUrl === '' ? '/' : flatSubUrl}\n                                key={flatSubUrl}\n                                className={cx('item secondLevel', {\n                                  menuActive: this.isActive(flatSubUrl),\n                                  disabled: subDraftItem,\n                                })}\n                                onClick={(e) => {\n                                  if (subDraftItem) e.preventDefault();\n                                }}\n                              >\n                                {subitem.title}\n                              </Link>\n                            </div>\n                            {subitem.items && subitem.items.length > 0 && (\n                              <div className=\"submenu-wrapper\">\n                                <div className=\"submenu\">\n                                  {subitem.items.map((subsubitem) => {\n                                    const flatSubSubUrl = flattenToAppURL(\n                                      subsubitem.url,\n                                    );\n                                    const subSubDraftItem =\n                                      subsubitem.review_state === 'draft';\n                                    return (\n                                      <Link\n                                        to={\n                                          flatSubSubUrl === ''\n                                            ? '/'\n                                            : flatSubSubUrl\n                                        }\n                                        title={subsubitem.title}\n                                        key={flatSubSubUrl}\n                                        className={cx('item thirdLevel', {\n                                          menuActive: this.isActive(flatSubUrl),\n                                          disabled: subSubDraftItem,\n                                        })}\n                                        onClick={(e) => {\n                                          if (subSubDraftItem)\n                                            e.preventDefault();\n                                        }}\n                                      >\n                                        {subsubitem.title}\n                                      </Link>\n                                    );\n                                  })}\n                                </div>\n                              </div>\n                            )}\n                          </>\n                        )}\n                      </Dropdown.Item>\n                    );\n                  })}\n                </Dropdown.Menu>\n              </Dropdown>\n            ) : (\n              <Link\n                to={flatUrl === '' ? '/' : flatUrl}\n                key={flatUrl}\n                className={\n                  this.isActive(flatUrl)\n                    ? 'item menuActive firstLevel'\n                    : 'item firstLevel'\n                }\n              >\n                {item.title}\n              </Link>\n            );\n          })}\n        </Menu>\n      </nav>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => {\n      return {\n        items: state.localnavigation.items,\n        userToken: state?.userSession?.token,\n      };\n    },\n    { getNavigation },\n  ),\n)(Navigation);\n","module.exports = require(\"lodash/isMatch\");"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAuBA;AAIA;AACA;AADA;AAGA;AACA;AACA;AA9BA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AAAA;AAIA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AADA;AAGA;AAGA;AADA;AAIA;AADA;AAIA;AAGA;AADA;AAIA;AADA;AAIA;AACA;AAvBA;AAyBA;AAAA;AACA;AAAA;AADA;AAzBA;AADA;AAkCA;AACA;AACA;AACA;AAMA;AAVA;AAAA;AAaA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAPA;AAWA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AANA;AAAA;AAXA;AAuBA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AATA;AAAA;AADA;AAgBA;AAAA;AACA;AAAA;AAEA;AAGA;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAfA;AAAA;AAoBA;AA5BA;AADA;AAjBA;AAoDA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AATA;AAAA;AADA;AAgBA;AAAA;AACA;AAAA;AAEA;AAGA;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAfA;AAAA;AAoBA;AA5BA;AADA;AAjBA;AAxDA;AA8GA;AAnHA;AAvBA;AA+IA;AAEA;AAHA;AAAA;AAYA;AApLA;AAnCA;AA2NA;AACA;AA7VA;AACA;AADA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAJA;AACA;AAwVA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;;;;;;;;;;;AC7YA;;;;A","sourceRoot":""}