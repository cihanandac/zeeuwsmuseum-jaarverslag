{"version":3,"file":"server.5faff0338ad93e9078e4.hot-update.js","sources":["webpack:///./src/customizations/components/theme/Breadcrumbs/Breadcrumbs.jsx"],"sourcesContent":["/**\n * Breadcrumbs components.\n * @module components/theme/Breadcrumbs/Breadcrumbs\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, Container, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport { getBreadcrumbs } from '@plone/volto/actions';\nimport { getBaseUrl, hasApiExpander } from '@plone/volto/helpers';\nimport { BsChevronCompactRight } from 'react-icons/bs';\nimport NavItems from '@plone/volto/components/theme/Navigation/NavItems';\nimport { getNavigation } from '@plone/volto/actions';\nimport { Dropdown, Menu, Accordion, Form } from 'semantic-ui-react';\n\n\nimport homeSVG from '@plone/volto/icons/home.svg';\n\nconst messages = defineMessages({\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n  breadcrumbs: {\n    id: 'Breadcrumbs',\n    defaultMessage: 'Breadcrumbs',\n  },\n});\n\n/**\n * Breadcrumbs container class.\n */\nexport class BreadcrumbsComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  static propTypes = {\n    getBreadcrumbs: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    root: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  componentDidMount() {\n    if (!hasApiExpander('breadcrumbs', getBaseUrl(this.props.pathname))) {\n      this.props.getBreadcrumbs(getBaseUrl(this.props.pathname));\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      if (!hasApiExpander('breadcrumbs', getBaseUrl(this.props.pathname))) {\n        this.props.getBreadcrumbs(getBaseUrl(nextProps.pathname));\n      }\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Segment\n        role=\"navigation\"\n        aria-label={this.props.intl.formatMessage(messages.breadcrumbs)}\n        className=\"breadcrumbs\"\n        secondary\n        vertical\n      >\n        {/* {console.log(\n          this.props.items.map((item, index, items) => [item.title]),\n        )} */}\n\n        {/* {console.log(\n          this.props.items[2]\n        )} */}\n\n        {/* {console.log(<NavItems items={this.props.items} />)} */}\n        {/* {console.log(<NavItems items={this.props.items} />)} */}\n\n        <Container className=\"crumbcontainer\">\n          <Breadcrumb>\n            <Link\n              to={this.props.root || '/'}\n              className=\"section\"\n              title={this.props.intl.formatMessage(messages.home)}\n            >\n              {/* <Icon name={homeSVG} size=\"25px\" /> */}\n            </Link>\n            {this.props.items.map((item, index, items) => [\n              <Breadcrumb.Divider>\n                <BsChevronCompactRight />\n              </Breadcrumb.Divider>,\n              index < items.length - 1 ? (\n                <Link key={item.url} to={item.url} className=\"section\">\n                  {item.title}\n                </Link>\n              ) : (\n                <Breadcrumb.Section key={item.url} active>\n                  {item.title}\n                </Breadcrumb.Section>\n              ),\n            ])}\n          </Breadcrumb>\n          <div className=\"inhoud\">\n            {' '}\n            <Dropdown item simple text=\"Inhoud\">\n              <Dropdown.Menu>\n                <Dropdown.Item id=\"InhoudDropdown\">\n                  <a href=\"https://www.zeeuwsmuseum.nl/nl/over-het-museum/steun-het-museum\">\n                    Steun het museum\n                  </a>\n                </Dropdown.Item>\n                <Dropdown.Item id=\"InhoudDropdown\">\n                  <a href=\"https://www.zeeuwsmuseum.nl/nl/over-het-museum/pers\">\n                    Pers\n                  </a>\n                </Dropdown.Item>\n                <Dropdown.Item id=\"InhoudDropdown\">\n                  <a href=\"https://www.zeeuwsmuseum.nl/nl/over-het-museum/organisatie\">\n                    Organisatie\n                  </a>\n                </Dropdown.Item>\n                <Dropdown.Item id=\"InhoudDropdown\">\n                  <a href=\"https://www.zeeuwsmuseum.nl/nl/over-het-museum/publicaties\">\n                    Publicaties\n                  </a>\n                </Dropdown.Item>\n                <Dropdown.Item id=\"InhoudDropdown\">\n                  <a href=\"https://www.zeeuwsmuseum.nl/nl/over-het-museum/voorwaarden\">\n                    Voorwaarden\n                  </a>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      items: state.breadcrumbs.items,\n      root: state.breadcrumbs.root,\n    }),\n    { getBreadcrumbs },\n  ),\n)(BreadcrumbsComponent);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAkBA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAjBA;AAuBA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AArBA;AADA;AAFA;AAxBA;AAlBA;AA6EA;AACA;AA5HA;AACA;AADA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAFA;AALA;AACA;AAsHA;AAIA;AACA;AAFA;AAIA;AAAA;;;;A","sourceRoot":""}