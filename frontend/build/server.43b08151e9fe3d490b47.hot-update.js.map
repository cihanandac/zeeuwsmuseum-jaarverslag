{"version":3,"file":"server.43b08151e9fe3d490b47.hot-update.js","sources":["webpack:///./src/customizations/components/theme/Breadcrumbs/Breadcrumbs.jsx"],"sourcesContent":["/**\n * Breadcrumbs components.\n * @module components/theme/Breadcrumbs/Breadcrumbs\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, Container, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport { getBreadcrumbs } from '@plone/volto/actions';\nimport { getBaseUrl, hasApiExpander } from '@plone/volto/helpers';\nimport { BsChevronCompactRight } from 'react-icons/bs';\nimport NavItems from '@plone/volto/components/theme/Navigation/NavItems';\nimport { getNavigation } from '@plone/volto/actions';\nimport { Dropdown, Menu, Accordion, Form } from 'semantic-ui-react';\nimport { FaChevronDown } from 'react-icons/fa';\n\nimport homeSVG from '@plone/volto/icons/home.svg';\n\nconst messages = defineMessages({\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n  breadcrumbs: {\n    id: 'Breadcrumbs',\n    defaultMessage: 'Breadcrumbs',\n  },\n});\n\n/**\n * Breadcrumbs container class.\n */\nexport class BreadcrumbsComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  static propTypes = {\n    getBreadcrumbs: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    root: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  componentDidMount() {\n    if (!hasApiExpander('breadcrumbs', getBaseUrl(this.props.pathname))) {\n      this.props.getBreadcrumbs(getBaseUrl(this.props.pathname));\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      if (!hasApiExpander('breadcrumbs', getBaseUrl(this.props.pathname))) {\n        this.props.getBreadcrumbs(getBaseUrl(nextProps.pathname));\n      }\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Segment\n        role=\"navigation\"\n        aria-label={this.props.intl.formatMessage(messages.breadcrumbs)}\n        className=\"breadcrumbs\"\n        secondary\n        vertical\n      >\n        {/* {console.log(\n          this.props.items.map((item, index, items) => [item.title]),\n        )} */}\n\n        {/* {console.log(\n          this.props.items[2]\n        )} */}\n\n        {/* {console.log(<NavItems items={this.props.intl} />)} */}\n        {/* {console.log(<NavItems items={this.props.items} />)} */}\n        {/* {console.log(this.props.items.length)} */}\n        <Container id=\"crumbcontainer\">\n          <Breadcrumb id=\"folderMap\">\n            <Link\n              to={this.props.root || '/'}\n              className=\"section\"\n              title={this.props.intl.formatMessage(messages.home)}\n            >\n              {/* <Icon name={homeSVG} size=\"25px\" /> */}\n            </Link>\n            {this.props.items.map((item, index, items) => [\n              ,\n              index < items.length - 1 ? (\n                <Link key={item.url} to={item.url} className=\"section\">\n                  {item.title}\n                  <span>&nbsp;</span>\n                </Link>\n              ) : index > 2 ? (\n                <Breadcrumb.Section\n                  className=\"crumbcontainer\"\n                  key={item.url}\n                  active\n                >\n                  <Breadcrumb.Divider className=\"breaddivider\">\n                    <BsChevronCompactRight\n                      stroke=\"white\"\n                      fill=\"currentColor\"\n                      strokeWidth=\"0.5\"\n                    />\n                  </Breadcrumb.Divider>\n                  <div className=\"breadtitle\">\n                    <span>{item.title}</span>\n                  </div>\n                </Breadcrumb.Section>\n              ) : (\n                ''\n              ),\n            ])}\n          </Breadcrumb>\n          <Container id=\"dropdowncontainer\">\n            <div id=\"inhoud\">\n              <Dropdown\n                item\n                simple\n                text={\n                  this.props.items.length > 3\n                    ? this.props.items[2].title\n                    : 'INHOUD'\n                }\n                icon={<FaChevronDown color=\"#808080\" />}\n              >\n                <Dropdown.Menu className=\"dropdownContentPage\">\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href={this.props.items.length <= 2 ? './.' : './'}>\n                      Beeldimpressie\n                    </a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./terugblik\">Terugblik</a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./inspireren-verwonderen\">\n                      Inspireren & Verwonderen\n                    </a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./bewaren-verzamelen\">Bewaren & Verzamelen</a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./leren-verbinden\">Leren & Verbinden</a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./eenzm\">eenZM</a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./financieel-verslag\">Financieel verslag</a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./cultureel-ondernemerschap\">\n                      Cultureel Ondernemerschap\n                    </a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./met-dank-aan\">Met dank aan</a>\n                  </Dropdown.Item>\n                  <Dropdown.Item id=\"InhoudDropdown\">\n                    <a href=\"./colofon\">Colofon</a>\n                  </Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n          </Container>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      items: state.breadcrumbs.items,\n      root: state.breadcrumbs.root,\n    }),\n    { getBreadcrumbs },\n  ),\n)(BreadcrumbsComponent);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAkBA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAUA;AAAA;AAAA;AAEA;AAAA;AAFA;AAMA;AAEA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AACA;AAAA;AADA;AAZA;AAhBA;AAqCA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AARA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAlCA;AAVA;AADA;AADA;AAtCA;AAlBA;AAgHA;AACA;AA/JA;AACA;AADA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAFA;AALA;AACA;AAyJA;AAIA;AACA;AAFA;AAIA;AAAA;;;;A","sourceRoot":""}