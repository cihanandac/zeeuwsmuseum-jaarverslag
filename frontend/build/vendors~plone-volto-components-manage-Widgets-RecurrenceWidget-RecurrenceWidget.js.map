{"version":3,"file":"vendors~plone-volto-components-manage-Widgets-RecurrenceWidget-RecurrenceWidget.js","sources":["webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/ByDayField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/ByMonthDayField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/ByMonthField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/ByYearField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/EndField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/IntervalField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/MonthOfTheYearField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/Occurences.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/RecurrenceWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/SelectInput.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/Utils.js","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/WeekdayOfTheMonthField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/WeekdayOfTheMonthIndexField.jsx"],"sourcesContent":["/**\n * ByDayField component.\n * @module components/manage/Widgets/RecurrenceWidget/ByDayField\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Button } from 'semantic-ui-react';\nimport { Days } from './Utils';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\n\n/**\n * ByDayField component class.\n * @function ByDayField\n * @returns {string} Markup of the component.\n */\nconst ByDayField = ({ label, value, onChange, moment: momentlib }) => {\n  const lang = useSelector((state) => state.intl.locale);\n  const moment = momentlib.default;\n  moment.locale(lang);\n\n  const toggleWeekDay = (dayName) => {\n    var day = Days[dayName];\n    var byweekday = value ? [...value] : [];\n\n    var i = byweekday.indexOf(day);\n    if (i >= 0) {\n      byweekday.splice(i, 1);\n    } else {\n      byweekday.push(day);\n    }\n    onChange('byweekday', byweekday);\n  };\n\n  return (\n    <Form.Field inline className=\"text\">\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor=\"byday\">{label}</label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\">\n            <Button.Group basic className=\"byday-field\">\n              {Object.keys(Days).map((d) => (\n                <Button\n                  key={d}\n                  active={value?.indexOf(Days[d]) >= 0}\n                  type=\"button\"\n                  content={moment.weekdaysShort(Days[d].weekday + 1)}\n                  onClick={() => {\n                    toggleWeekDay(d);\n                  }}\n                />\n              ))}\n            </Button.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nByDayField.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nByDayField.defaultProps = {\n  label: null,\n  value: null,\n  onChange: null,\n};\n\nexport default injectLazyLibs(['moment'])(ByDayField);\n","/**\n * ByMonthDayField component.\n * @module components/manage/Widgets/RecurrenceWidget/ByMonthDayField\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Form, Input } from 'semantic-ui-react';\n\nconst messages = defineMessages({\n  bymonthDay: { id: 'Month day', defaultMessage: 'Day' },\n  ofTheMonth: { id: 'of the month', defaultMessage: 'of the month' },\n});\n/**\n * ByMonthDayField component class.\n * @function ByMonthDayField\n * @returns {string} Markup of the component.\n */\nconst ByMonthDayField = ({\n  value,\n  disabled,\n  onChange,\n  hideAfterLabel,\n  intl,\n}) => {\n  return (\n    <>\n      <Form.Field inline disabled={disabled}>\n        {intl.formatMessage(messages.bymonthDay)}\n      </Form.Field>\n      <Form.Field inline disabled={disabled}>\n        <Input\n          type=\"number\"\n          id=\"bymonthday\"\n          name=\"bymonthday\"\n          value={value || ''}\n          onChange={({ target }) => {\n            onChange(\n              target.id,\n              target.value === '' ? undefined : [parseInt(target.value)],\n            );\n          }}\n        />\n      </Form.Field>\n      {!hideAfterLabel && (\n        <Form.Field inline disabled={disabled}>\n          {intl.formatMessage(messages.ofTheMonth)}\n        </Form.Field>\n      )}\n    </>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nByMonthDayField.propTypes = {\n  disabled: PropTypes.bool,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  hideAfterLabel: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nByMonthDayField.defaultProps = {\n  disabled: false,\n  value: null,\n  onChange: null,\n  hideAfterLabel: false,\n};\n\nexport default injectIntl(ByMonthDayField);\n","/**\n * ByMonthField component.\n * @module components/manage/Widgets/RecurrenceWidget/ByMonthField\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { Form, Grid, Radio } from 'semantic-ui-react';\nimport ByMonthDayField from './ByMonthDayField';\nimport WeekdayOfTheMonthIndexField from './WeekdayOfTheMonthIndexField';\nimport WeekdayOfTheMonthField from './WeekdayOfTheMonthField';\n\n/**\n * ByMonthField component class.\n * @function ByMonthField\n * @returns {string} Markup of the component.\n */\nconst ByMonthField = ({\n  label,\n  value,\n  bymonthday,\n  weekdayOfTheMonthIndex,\n  weekdayOfTheMonth,\n  onChange,\n  intl,\n}) => {\n  return (\n    <Form.Field inline className=\"text\">\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor=\"monthly\">{label}</label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\">\n            <Form.Group inline>\n              <Form.Field>\n                <Radio\n                  label=\"\"\n                  name=\"monthly\"\n                  id=\"monthly-bymonthday\"\n                  value=\"bymonthday\"\n                  checked={value === 'bymonthday'}\n                  onChange={(e, { value }) => onChange('monthly', value)}\n                />\n              </Form.Field>\n              <ByMonthDayField\n                value={bymonthday}\n                disabled={value !== 'bymonthday'}\n                onChange={onChange}\n              />\n            </Form.Group>\n            <Form.Group inline>\n              <Form.Field>\n                <Radio\n                  label=\"\"\n                  name=\"monthly\"\n                  id=\"monthly-byweekday\"\n                  value=\"byweekday\"\n                  checked={value === 'byweekday'}\n                  onChange={(e, { value }) => onChange('monthly', value)}\n                />\n              </Form.Field>\n\n              <WeekdayOfTheMonthIndexField\n                disabled={value !== 'byweekday'}\n                value={weekdayOfTheMonthIndex}\n                onChange={onChange}\n              />\n\n              <WeekdayOfTheMonthField\n                disabled={value !== 'byweekday'}\n                value={weekdayOfTheMonth}\n                onChange={onChange}\n              />\n            </Form.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nByMonthField.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.any,\n  bymonthday: PropTypes.any,\n  weekdayOfTheMonthIndex: PropTypes.any,\n  weekdayOfTheMonth: PropTypes.any,\n  onChange: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nByMonthField.defaultProps = {\n  label: null,\n  value: null,\n  bymonthday: null,\n  weekdayOfTheMonthIndex: null,\n  weekdayOfTheMonth: null,\n  onChange: null,\n};\n\nexport default injectIntl(ByMonthField);\n","/**\n * ByYearField component.\n * @module components/manage/Widgets/RecurrenceWidget/ByYearField\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Form, Grid, Radio } from 'semantic-ui-react';\n\nimport ByMonthDayField from './ByMonthDayField';\nimport MonthOfTheYearField from './MonthOfTheYearField';\nimport WeekdayOfTheMonthIndexField from './WeekdayOfTheMonthIndexField';\nimport WeekdayOfTheMonthField from './WeekdayOfTheMonthField';\nconst messages = defineMessages({\n  ofTheMonth: { id: 'of the month', defaultMessage: 'of the month' },\n});\n/**\n * ByYearField component class.\n * @function ByYearField\n * @returns {string} Markup of the component.\n */\nconst ByYearField = ({\n  label,\n  value,\n  bymonthday,\n  monthOfTheYear,\n  weekdayOfTheMonthIndex,\n  weekdayOfTheMonth,\n  onChange,\n  intl,\n}) => {\n  return (\n    <Form.Field inline className=\"text byyear-field\">\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor=\"yearly\">{label}</label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\">\n            <Form.Group inline className=\"byyear-bymonthday\">\n              <Form.Field>\n                <Radio\n                  label=\"\"\n                  name=\"yearly\"\n                  value=\"bymonthday\"\n                  id=\"yearly-bymonthday\"\n                  checked={value === 'bymonthday'}\n                  onChange={(e, { value }) => onChange('yearly', value)}\n                />\n              </Form.Field>\n\n              <ByMonthDayField\n                value={bymonthday}\n                disabled={value !== 'bymonthday'}\n                onChange={onChange}\n                hideAfterLabel={true}\n              />\n\n              <MonthOfTheYearField\n                value={monthOfTheYear}\n                disabled={value !== 'bymonthday'}\n                onChange={onChange}\n              />\n            </Form.Group>\n            <Form.Group inline className=\"byyear-byday\">\n              <Form.Field>\n                <Radio\n                  label=\"\"\n                  name=\"yearly\"\n                  id=\"yearly-byday\"\n                  value=\"byday\"\n                  checked={value === 'byday'}\n                  onChange={(e, { value }) => onChange('yearly', value)}\n                />\n              </Form.Field>\n\n              <WeekdayOfTheMonthIndexField\n                disabled={value !== 'byday'}\n                value={weekdayOfTheMonthIndex}\n                onChange={onChange}\n              />\n\n              <WeekdayOfTheMonthField\n                disabled={value !== 'byday'}\n                value={weekdayOfTheMonth}\n                onChange={onChange}\n              />\n\n              <Form.Field disabled={value !== 'byday'}>\n                {intl.formatMessage(messages.ofTheMonth)}\n              </Form.Field>\n\n              <MonthOfTheYearField\n                value={monthOfTheYear}\n                disabled={value !== 'byday'}\n                onChange={onChange}\n                inline={false}\n              />\n            </Form.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nByYearField.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.any,\n  bymonthday: PropTypes.any,\n  monthOfTheYear: PropTypes.any,\n  weekdayOfTheMonthIndex: PropTypes.any,\n  weekdayOfTheMonth: PropTypes.any,\n  onChange: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nByYearField.defaultProps = {\n  label: null,\n  value: null,\n  bymonthday: null,\n  monthOfTheYear: null,\n  weekdayOfTheMonthIndex: null,\n  weekdayOfTheMonth: null,\n  onChange: null,\n};\n\nexport default injectIntl(ByYearField);\n","/**\n * EndField component.\n * @module components/manage/Widgets/RecurrenceWidget/EndField\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Form, Grid, Input, Radio } from 'semantic-ui-react';\nimport DatetimeWidget from '../DatetimeWidget';\n\nconst messages = defineMessages({\n  recurrenceEnds: { id: 'Recurrence ends', defaultMessage: 'Ends' },\n  recurrenceEndsCount: { id: 'Recurrence ends after', defaultMessage: 'after' },\n  recurrenceEndsUntil: { id: 'Recurrence ends on', defaultMessage: 'on' },\n  occurrences: { id: 'Occurences', defaultMessage: 'occurrence(s)' },\n});\n/**\n * EndField component class.\n * @function EndField\n * @returns {string} Markup of the component.\n */\nconst EndField = ({ value, count, until, onChange, intl }) => {\n  return (\n    <Form.Field inline className=\"text\">\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor=\"recurrenceEnds\">\n                {intl.formatMessage(messages.recurrenceEnds)}\n              </label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\">\n            <Form.Group inline>\n              <Form.Field>\n                <Radio\n                  label=\"\"\n                  name=\"recurrenceEnds\"\n                  id=\"recurrenceEndsCount\"\n                  value=\"count\"\n                  checked={value === 'count'}\n                  onChange={(e, { value }) => onChange('recurrenceEnds', value)}\n                />\n              </Form.Field>\n              <Form.Field disabled={value !== 'count'}>\n                {intl.formatMessage(messages.recurrenceEndsCount)}\n              </Form.Field>\n              <Form.Field disabled={value !== 'count'}>\n                <Input\n                  id=\"count\"\n                  name=\"count\"\n                  value={count || ''}\n                  onChange={({ target }) => {\n                    onChange(\n                      target.id,\n                      target.value === '' ? undefined : target.value,\n                    );\n                  }}\n                />\n              </Form.Field>\n              <Form.Field disabled={value !== 'count'}>\n                {intl.formatMessage(messages.occurrences)}\n              </Form.Field>\n            </Form.Group>\n            <Form.Group inline>\n              <Form.Field>\n                <Radio\n                  id=\"recurrenceEndsUntil\"\n                  label=\"\"\n                  name=\"recurrenceEnds\"\n                  value=\"until\"\n                  checked={value === 'until'}\n                  onChange={(e, { value }) => onChange('recurrenceEnds', value)}\n                />\n              </Form.Field>\n\n              <Form.Field disabled={value !== 'until'}>\n                <DatetimeWidget\n                  id=\"until\"\n                  title={intl.formatMessage(messages.recurrenceEndsUntil)}\n                  dateOnly={true}\n                  value={until || ''}\n                  resettable={false}\n                  onChange={(id, value) => {\n                    onChange(id, value === '' ? undefined : value);\n                  }}\n                />\n              </Form.Field>\n            </Form.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEndField.propTypes = {\n  value: PropTypes.string,\n  count: PropTypes.any,\n  until: PropTypes.any,\n  onChange: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nEndField.defaultProps = {\n  value: null,\n  count: null,\n  until: null,\n  onChange: null,\n};\n\nexport default injectIntl(EndField);\n","/**\n * IntervalField component.\n * @module components/manage/Widgets/RecurrenceWidget/IntervalField\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Input } from 'semantic-ui-react';\n\n/**\n * IntervalField component class.\n * @function IntervalField\n * @returns {string} Markup of the component.\n */\nconst IntervalField = ({ label, labelAfter, value, onChange }) => {\n  return (\n    <Form.Field inline className=\"text\">\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor=\"interval\">{label}</label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\">\n            <Form.Field inline>\n              <Input\n                id=\"interval\"\n                name=\"interval\"\n                value={value || ''}\n                onChange={({ target }) => {\n                  onChange(\n                    target.id,\n                    target.value === '' ? undefined : parseInt(target.value),\n                  );\n                }}\n              />\n              {labelAfter && <span>{labelAfter}</span>}\n            </Form.Field>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nIntervalField.propTypes = {\n  label: PropTypes.string.isRequired,\n  labelAfter: PropTypes.string,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nIntervalField.defaultProps = {\n  label: null,\n  labelAfter: null,\n  onChange: null,\n};\n\nexport default IntervalField;\n","/**\n * MonthOfTheYearField component.\n * @module components/manage/Widgets/RecurrenceWidget/MonthOfTheYearField\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { map } from 'lodash';\nimport { Form } from 'semantic-ui-react';\nimport SelectInput from './SelectInput';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\n\n/**\n * MonthOfTheYearField component class.\n * @function MonthOfTheYearField\n * @returns {string} Markup of the component.\n */\nconst MonthOfTheYearField = ({\n  value,\n  disabled,\n  inline,\n  onChange,\n  moment: momentlib,\n}) => {\n  const moment = momentlib.default;\n  const lang = useSelector((state) => state.intl.locale);\n  moment.locale(lang);\n  const monthList = [\n    ...map(moment.months(), (m, i) => ({\n      value: i + 1,\n      label: m,\n    })),\n  ];\n\n  return (\n    <Form.Field inline={inline} disabled={disabled}>\n      <SelectInput\n        name=\"monthOfTheYear\"\n        disabled={disabled}\n        options={monthList}\n        value={value}\n        onChange={onChange}\n      />\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nMonthOfTheYearField.propTypes = {\n  value: PropTypes.any,\n  disabled: PropTypes.bool,\n  inline: PropTypes.bool,\n  onChange: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nMonthOfTheYearField.defaultProps = {\n  value: null,\n  disabled: false,\n  inline: false,\n  onChange: null,\n};\n\nexport default injectLazyLibs(['moment'])(MonthOfTheYearField);\n","/**\n * Occurences component.\n * @module components/manage/Widgets/RecurrenceWidget/Occurences\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { List, Button, Header, Label } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nimport { useSelector } from 'react-redux';\nimport { toISOString } from './Utils';\n\nconst messages = defineMessages({\n  selected_dates: {\n    id: 'Selected dates',\n    defaultMessage: 'Selected dates',\n  },\n  start_of_recurrence: {\n    id: 'Start of the recurrence',\n    defaultMessage: 'Start of the recurrence',\n  },\n  additional_date: {\n    id: 'Additional date',\n    defaultMessage: 'Additional date',\n  },\n  other_items: {\n    id: 'others',\n    defaultMessage: 'others',\n  },\n  no_occurences: {\n    id: 'No occurences set',\n    defaultMessage: 'No occurences set',\n  },\n  exclude: {\n    id: 'Exclude this occurence',\n    defaultMessage: 'Exclude this occurence',\n  },\n  include: {\n    id: 'Include this occurence',\n    defaultMessage: 'Include this occurence',\n  },\n});\n\nconst formatDate = (d, moment) => {\n  const m = moment(d);\n  return m.format('dddd') + ', ' + m.format('LL');\n};\n\n/**\n * Occurences component class.\n * @function Occurences\n * @returns {string} Markup of the component.\n */\nconst Occurences_ = ({\n  rruleSet,\n  exclude,\n  undoExclude,\n  intl,\n  showTitle,\n  editOccurences,\n  moment: momentlib,\n}) => {\n  const moment = momentlib.default;\n  const lang = useSelector((state) => state.intl.locale);\n  moment.locale(lang);\n  let all = [];\n  const isExcluded = (date) => {\n    var dateISO = toISOString(date);\n    var excluded = false;\n    rruleSet.exdates().forEach((ex) => {\n      var exISO = toISOString(ex);\n      if (exISO === dateISO) {\n        excluded = true;\n      }\n    });\n    return excluded;\n  };\n\n  const isAdditional = (date) => {\n    var dateISO = toISOString(date);\n    var additional = false;\n    rruleSet.rdates().forEach((d) => {\n      var dd = toISOString(d);\n      if (dd === dateISO) {\n        additional = true;\n      }\n    });\n    return additional;\n  };\n\n  if (rruleSet) {\n    all = rruleSet.all();\n\n    rruleSet.exdates().forEach((date) => {\n      if (all.indexOf(date) < 0) {\n        all.push(date);\n      }\n    });\n    all.sort((a, b) => {\n      return a > b ? 1 : -1;\n    });\n  }\n\n  const others = all.splice(100);\n\n  return (\n    <div className=\"occurences\">\n      {all.length === 0 && <>{intl.formatMessage(messages.no_occurences)}</>}\n      {showTitle && (\n        <Header as=\"h2\">{intl.formatMessage(messages.selected_dates)}</Header>\n      )}\n\n      <List divided verticalAlign=\"middle\">\n        {all.map((date, index) => {\n          const excluded = isExcluded(date);\n          return (\n            <List.Item key={date.toString()}>\n              {editOccurences && (\n                <List.Content floated=\"right\">\n                  {index > 0 ? (\n                    <>\n                      {!excluded && (\n                        <Button\n                          basic\n                          icon\n                          className=\"exclude-button\"\n                          onClick={() => {\n                            exclude(date);\n                          }}\n                          aria-label={intl.formatMessage(messages.exclude)}\n                        >\n                          <Icon name={trashSVG} size=\"18px\" />\n                        </Button>\n                      )}\n                      {excluded && (\n                        <Button\n                          basic\n                          icon\n                          className=\"include-button\"\n                          onClick={() => {\n                            undoExclude(date);\n                          }}\n                          aria-label={intl.formatMessage(messages.include)}\n                        >\n                          <Icon name={addSVG} size=\"24px\" />\n                        </Button>\n                      )}\n                    </>\n                  ) : (\n                    intl.formatMessage(messages.start_of_recurrence)\n                  )}\n                </List.Content>\n              )}\n              <List.Content className={cx({ excluded: excluded })}>\n                {formatDate(date, moment)}\n                {isAdditional(date) && (\n                  <Label\n                    pointing=\"left\"\n                    size=\"small\"\n                    color={excluded ? 'grey' : 'green'}\n                  >\n                    {intl.formatMessage(messages.additional_date)}\n                  </Label>\n                )}\n              </List.Content>\n            </List.Item>\n          );\n        })}\n        {others.length > 0 && (\n          <List.Item>\n            <List.Content>\n              {`... ${intl.formatMessage(messages.other_items)} ${\n                others.length\n              }`}\n            </List.Content>\n          </List.Item>\n        )}\n      </List>\n    </div>\n  );\n};\n\nexport const Occurences = injectLazyLibs(['moment'])(Occurences_);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nOccurences.propTypes = {\n  rruleSet: PropTypes.any,\n  showTitle: PropTypes.bool,\n  editOccurences: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nOccurences.defaultProps = {\n  rruleSet: null,\n  showTitle: true,\n  editOccurences: true,\n};\n\nexport default injectIntl(Occurences);\n","/**\n * RecurrenceWidget component.\n * @module components/manage/Widgets/RecurrenceWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { RRule, RRuleSet, rrulestr } from 'rrule';\nimport { connect } from 'react-redux';\n\nimport cx from 'classnames';\nimport { isEqual, map, find, concat, remove } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  Form,\n  Grid,\n  Label,\n  Button,\n  Segment,\n  Modal,\n  Header,\n} from 'semantic-ui-react';\n\nimport { SelectWidget, Icon, DatetimeWidget } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport editingSVG from '@plone/volto/icons/editing.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nimport {\n  Days,\n  OPTIONS,\n  FREQUENCES,\n  WEEKLY_DAYS,\n  MONDAYFRIDAY_DAYS,\n  toISOString,\n  rrulei18n,\n} from './Utils';\n\nimport IntervalField from './IntervalField';\nimport ByDayField from './ByDayField';\nimport EndField from './EndField';\nimport ByMonthField from './ByMonthField';\nimport ByYearField from './ByYearField';\nimport Occurences from './Occurences';\n\nconst messages = defineMessages({\n  editRecurrence: {\n    id: 'Edit recurrence',\n    defaultMessage: 'Edit recurrence',\n  },\n  save: {\n    id: 'Save recurrence',\n    defaultMessage: 'Save',\n  },\n  remove: {\n    id: 'Remove recurrence',\n    defaultMessage: 'Remove',\n  },\n  repeat: {\n    id: 'Repeat',\n    defaultMessage: 'Repeat',\n  },\n  daily: {\n    id: 'Daily',\n    defaultMessage: 'Daily',\n  },\n  mondayfriday: {\n    id: 'Monday and Friday',\n    defaultMessage: 'Monday and Friday',\n  },\n\n  weekdays: {\n    id: 'Weekday',\n    defaultMessage: 'Weekday',\n  },\n  weekly: {\n    id: 'Weekly',\n    defaultMessage: 'Weekly',\n  },\n  monthly: {\n    id: 'Monthly',\n    defaultMessage: 'Monthly',\n  },\n  yearly: {\n    id: 'Yearly',\n    defaultMessage: 'Yearly',\n  },\n\n  repeatEvery: {\n    id: 'Repeat every',\n    defaultMessage: 'Repeat every',\n  },\n  repeatOn: {\n    id: 'Repeat on',\n    defaultMessage: 'Repeat on',\n  },\n\n  interval_daily: {\n    id: 'Interval Daily',\n    defaultMessage: 'days',\n  },\n  interval_weekly: {\n    id: 'Interval Weekly',\n    defaultMessage: 'week(s)',\n  },\n  interval_monthly: {\n    id: 'Interval Monthly',\n    defaultMessage: 'Month(s)',\n  },\n  interval_yearly: {\n    id: 'Interval Yearly',\n    defaultMessage: 'year(s)',\n  },\n  add_date: {\n    id: 'Add date',\n    defaultMessage: 'Add date',\n  },\n  select_date_to_add_to_recurrence: {\n    id: 'Select a date to add to recurrence',\n    defaultMessage: 'Select a date to add to recurrence',\n  },\n});\n\nconst NoRRuleOptions = [\n  'recurrenceEnds',\n  'monthly',\n  'weekdayOfTheMonthIndex',\n  'weekdayOfTheMonth',\n  'yearly',\n  'monthOfTheYear',\n  'byhour',\n  'byminute',\n  'bysecond',\n  'bynmonthday',\n  'exdates',\n  'rdates',\n];\n/**\n * RecurrenceWidget component class.\n * @function RecurrenceWidget\n * @returns {string} Markup of the component.\n */\nclass RecurrenceWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    formData: PropTypes.object,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    error: [],\n    value: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props, intl) {\n    super(props);\n\n    this.moment = this.props.moment.default;\n    this.moment.locale(this.props.lang);\n\n    let rruleSet = this.props.value\n      ? rrulestr(props.value, {\n          compatible: true, //If set to True, the parser will operate in RFC-compatible mode. Right now it means that unfold will be turned on, and if a DTSTART is found, it will be considered the first recurrence instance, as documented in the RFC.\n          forceset: true,\n          // dtstart: props.formData.start\n          //   ? this.getUTCDate(props.formData.start)\n          //       .startOf('day')\n          //       .toDate()\n          //   : null,\n        })\n      : new RRuleSet();\n\n    this.state = {\n      open: false,\n      rruleSet: rruleSet,\n      formValues: this.getFormValues(rruleSet),\n      RRULE_LANGUAGE: rrulei18n(this.props.intl, this.moment, this.props.lang),\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.value) {\n      this.setRecurrenceStartEnd();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.value) {\n      if (prevProps.formData?.start !== this.props.formData?.start) {\n        let start = this.getUTCDate(this.props.formData?.start)\n          .startOf('day')\n          .toDate();\n\n        this.setState((prevState) => {\n          let rruleSet = prevState.rruleSet;\n\n          rruleSet = this.updateRruleSet(\n            rruleSet,\n            prevState.formValues,\n            'dtstart',\n            start,\n          );\n\n          return {\n            ...prevState,\n            rruleSet,\n          };\n        });\n      }\n    }\n  }\n\n  editRecurrence = () => {\n    this.setRecurrenceStartEnd();\n  };\n\n  setRecurrenceStartEnd = () => {\n    const start = this.props.formData?.start;\n\n    let _start = this.getUTCDate(start).startOf('day').toDate();\n\n    this.setState((prevState) => {\n      let rruleSet = prevState.rruleSet;\n      const formValues = this.getFormValues(rruleSet); //to set default values, included end\n\n      rruleSet = this.updateRruleSet(rruleSet, formValues, 'dtstart', _start);\n      return {\n        ...prevState,\n        rruleSet,\n        formValues,\n      };\n    });\n  };\n\n  getUTCDate = (date) => {\n    return date.match(/T(.)*(-|\\+|Z)/g)\n      ? this.moment(date).utc()\n      : this.moment(`${date}Z`).utc();\n  };\n\n  show = (dimmer) => () => {\n    this.setState({ dimmer, open: true });\n    this.editRecurrence();\n  };\n  close = () => this.setState({ open: false });\n\n  getFreq = (number, weekdays) => {\n    let freq = FREQUENCES.DAILY;\n    Object.entries(OPTIONS.frequences).forEach(([f, o]) => {\n      if (o.rrule === number) {\n        freq = f;\n      }\n    });\n    if (freq === FREQUENCES.WEEKLY && weekdays) {\n      if (isEqual(weekdays.sort(), WEEKLY_DAYS.map((w) => w.weekday).sort())) {\n        freq = FREQUENCES.WEEKDAYS;\n      }\n    }\n    return freq;\n  };\n\n  getWeekday = (number) => {\n    var day = null;\n    const n = number === -1 ? 6 : number; //because sunday for moment has index 0, but for rrule has index 6\n    Object.keys(Days).forEach((d) => {\n      if (Days[d].weekday === n) {\n        day = Days[d];\n      }\n    });\n    return day;\n  };\n\n  /**\n   * Called on init, to populate form values\n   * */\n  getFormValues = (rruleSet) => {\n    //default\n    let formValues = {\n      freq: FREQUENCES.DAILY,\n      interval: 1,\n    };\n\n    formValues = this.changeField(\n      formValues,\n      'recurrenceEnds',\n      this.props.formData?.end ? 'until' : 'count',\n    );\n\n    const rrule = rruleSet.rrules()[0];\n\n    if (rrule) {\n      var freq = this.getFreq(rrule.options.freq, rrule.options.byweekday);\n\n      //init with rruleOptions\n      Object.entries(rrule.options).forEach(([option, value]) => {\n        switch (option) {\n          case 'freq':\n            formValues[option] = freq;\n            break;\n          case 'count':\n            if (value != null) {\n              formValues['recurrenceEnds'] = option;\n              formValues[option] = value;\n            }\n            break;\n          case 'until':\n            if (value != null) {\n              formValues['recurrenceEnds'] = option;\n              formValues[option] = toISOString(value);\n            }\n            break;\n          case 'byweekday':\n            if (value && value.length > 0) {\n              if (isEqual(value, WEEKLY_DAYS)) {\n                formValues['freq'] = FREQUENCES.WEEKDAYS;\n              }\n              if (isEqual(value, MONDAYFRIDAY_DAYS)) {\n                formValues['freq'] = FREQUENCES.MONDAYFRIDAY;\n              }\n            }\n            formValues[option] = value\n              ? value.map((d) => {\n                  return this.getWeekday(d);\n                })\n              : [];\n            break;\n          case 'bymonthday':\n            if (value && value.length > 0) {\n              if (freq === FREQUENCES.MONTHLY) {\n                formValues['monthly'] = option;\n              }\n              if (freq === FREQUENCES.YEARLY) {\n                formValues['yearly'] = option;\n              }\n            } else {\n              if (freq === FREQUENCES.MONTHLY) {\n                formValues['monthly'] = null;\n              }\n              if (freq === FREQUENCES.YEARLY) {\n                formValues['yearly'] = null;\n              }\n            }\n            formValues[option] = value;\n            break;\n          case 'bynweekday':\n            if (value && value.length > 0) {\n              //[weekDayNumber,orinal_number] -> translated is for example: [sunday, third] -> the third sunday of the month\n\n              if (freq === FREQUENCES.SMONTHLY) {\n                formValues['monthly'] = 'byweekday';\n              }\n              if (freq === FREQUENCES.YEARLY) {\n                formValues['yearly'] = 'byday';\n              }\n              formValues['weekdayOfTheMonth'] = value[0][0];\n              formValues['weekdayOfTheMonthIndex'] = value[0][1];\n            }\n            break;\n          case 'bymonth':\n            if (freq === FREQUENCES.YEARLY) {\n              formValues['yearly'] = 'byday';\n            }\n            formValues['monthOfTheYear'] = value ? value[0] : null;\n            break;\n\n          default:\n            formValues[option] = value;\n        }\n      });\n    }\n    return formValues;\n  };\n\n  formValuesToRRuleOptions = (formValues) => {\n    var values = Object.assign({}, formValues);\n\n    //remove NoRRuleOptions\n    NoRRuleOptions.forEach((opt) => {\n      delete values[opt];\n    });\n\n    //transform values for rrule\n    Object.keys(values).forEach((field) => {\n      var value = values[field];\n      switch (field) {\n        case 'freq':\n          if (value) {\n            value = OPTIONS.frequences[value].rrule;\n          }\n          break;\n        case 'until':\n          value = value ? this.moment(new Date(value)).utc().toDate() : null;\n          break;\n        default:\n          break;\n      }\n\n      if (value) {\n        //set value\n        values[field] = value;\n      } else {\n        //remove empty values\n        delete values[field];\n      }\n    });\n\n    return values;\n  };\n\n  updateRruleSet = (rruleSet, formValues, field, value) => {\n    var rruleOptions = this.formValuesToRRuleOptions(formValues);\n    var dstart =\n      field === 'dtstart'\n        ? value\n        : rruleSet.dtstart()\n        ? rruleSet.dtstart()\n        : this.moment().utc().toDate();\n    var exdates =\n      field === 'exdates' ? value : Object.assign([], rruleSet.exdates());\n\n    var rdates =\n      field === 'rdates' ? value : Object.assign([], rruleSet.rdates());\n\n    rruleOptions.dtstart = dstart;\n\n    let set = new RRuleSet();\n    //set.dtstart(dstart);\n    set.rrule(new RRule(rruleOptions));\n\n    exdates.map((ex) => set.exdate(ex));\n    rdates.map((r) => set.rdate(r));\n\n    return set;\n  };\n\n  getDefaultUntil = (freq) => {\n    const moment = this.moment;\n    var end = this.props.formData?.end\n      ? toISOString(this.getUTCDate(this.props.formData.end).toDate())\n      : null;\n    var tomorrow = toISOString(moment().add(1, 'days').utc().toDate());\n    var nextWeek = toISOString(moment().add(7, 'days').utc().toDate());\n    var nextMonth = toISOString(moment().add(1, 'months').utc().toDate());\n    var nextYear = toISOString(moment().add(1, 'years').utc().toDate());\n\n    var until = end;\n    switch (freq) {\n      case FREQUENCES.DAILY:\n        until = end ? end : tomorrow;\n        break;\n      case FREQUENCES.WEEKLY:\n        until = end ? end : nextWeek;\n        break;\n      case FREQUENCES.WEEKDAYS:\n        until = end ? end : nextWeek;\n        break;\n      case FREQUENCES.MONDAYFRIDAY:\n        until = end ? end : nextWeek;\n        break;\n      case FREQUENCES.MONTHLY:\n        until = end ? end : nextMonth;\n        break;\n      case FREQUENCES.YEARLY:\n        until = end ? end : nextYear;\n        break;\n      default:\n        break;\n    }\n\n    return until;\n  };\n\n  changeField = (formValues, field, value) => {\n    //  git p.log('field', field, 'value', value);\n    //get weekday from state.\n    const moment = this.moment;\n    const byweekday =\n      this.state?.rruleSet?.rrules().length > 0\n        ? this.state.rruleSet.rrules()[0].origOptions.byweekday\n        : null;\n    const currWeekday = this.getWeekday(moment().day() - 1);\n    const currMonth = moment().month() + 1;\n\n    const startMonth = this.props.formData?.start\n      ? moment(this.props.formData.start).month() + 1\n      : currMonth;\n\n    const startWeekday = this.props.formData?.start\n      ? this.getWeekday(moment(this.props.formData.start).day() - 1)\n      : currWeekday;\n    formValues[field] = value;\n\n    const defaultMonthDay = this.props.formData?.start\n      ? moment(this.props.formData.start).date()\n      : moment().date();\n\n    switch (field) {\n      case 'freq':\n        formValues.interval = 1;\n        const fconfig = OPTIONS.frequences[value];\n\n        //clear values\n        if (!fconfig.interval) {\n          formValues.interval = null;\n        }\n\n        formValues = this.changeField(formValues, 'byweekday', null);\n        formValues = this.changeField(formValues, 'yearly', null);\n        formValues = this.changeField(formValues, 'bymonthday', null);\n        formValues = this.changeField(formValues, 'byweekday', null);\n        formValues = this.changeField(formValues, 'monthOfTheYear', null);\n\n        if (!formValues.until) {\n          formValues.until = this.getDefaultUntil(value);\n        }\n\n        //set defaults\n        switch (value) {\n          case FREQUENCES.DAILY:\n            break;\n          case FREQUENCES.WEEKDAYS:\n            formValues = this.changeField(formValues, 'byweekday', WEEKLY_DAYS);\n            break;\n          case FREQUENCES.MONDAYFRIDAY:\n            formValues = this.changeField(\n              formValues,\n              'byweekday',\n              MONDAYFRIDAY_DAYS,\n            );\n            break;\n          case FREQUENCES.WEEKLY:\n            formValues = this.changeField(formValues, 'byweekday', [\n              startWeekday,\n            ]);\n\n            break;\n          case FREQUENCES.MONTHLY:\n            formValues = this.changeField(formValues, 'monthly', 'bymonthday');\n\n            break;\n          case FREQUENCES.YEARLY:\n            formValues = this.changeField(formValues, 'yearly', 'bymonthday');\n            break;\n          default:\n            break;\n        }\n\n        break;\n\n      case 'recurrenceEnds':\n        if (value === 'count') {\n          formValues.count = 1;\n          formValues.until = null;\n        }\n        if (value === 'until') {\n          formValues.until = this.getDefaultUntil(formValues.freq);\n          formValues.count = null; //default value\n        }\n        break;\n\n      case 'byweekday':\n        formValues.byweekday = value;\n\n        if (FREQUENCES.WEEKLY !== formValues.freq) {\n          formValues.weekdayOfTheMonth = value ? value[0].weekday : null;\n          formValues.weekdayOfTheMonthIndex = value ? value[0].n : null;\n        } else {\n          delete formValues.weekdayOfTheMonth;\n          delete formValues.weekdayOfTheMonthIndex;\n        }\n\n        break;\n      case 'weekdayOfTheMonth':\n        var weekday = this.getWeekday(value); // get new day\n        var n = byweekday ? byweekday[0].n : 1;\n        //set nth value\n        formValues.byweekday = weekday ? [weekday.nth(n)] : null;\n        break;\n      case 'weekdayOfTheMonthIndex':\n        var week_day = byweekday ? byweekday[0] : currWeekday; //get day from state. If not set get current day\n        //set nth value\n        formValues.byweekday = value ? [week_day.nth(value)] : null;\n        break;\n\n      case 'monthOfTheYear':\n        if (value === null || value === undefined) {\n          delete formValues.bymonth;\n        } else {\n          formValues.bymonth = [value];\n        }\n        break;\n\n      case 'monthly':\n        if (value === 'bymonthday') {\n          formValues.bymonthday = [defaultMonthDay]; //default value\n          formValues = this.changeField(formValues, 'byweekday', null); //default value\n        }\n        if (value === 'byweekday') {\n          formValues.bymonthday = null; //default value\n          formValues = this.changeField(formValues, 'byweekday', [\n            currWeekday.nth(1),\n          ]); //default value\n        }\n        if (value === null) {\n          formValues = this.changeField(formValues, 'bymonthday', null); //default value\n          formValues = this.changeField(formValues, 'byweekday', null); //default value\n        }\n        break;\n      case 'yearly':\n        if (value === 'bymonthday') {\n          //sets bymonth and bymonthday in rruleset\n          formValues.bymonthday = [defaultMonthDay]; //default value\n\n          formValues = this.changeField(\n            formValues,\n            'monthOfTheYear',\n            startMonth,\n          ); //default value: current month\n          formValues = this.changeField(formValues, 'byweekday', null); //default value\n        }\n        if (value === 'byday') {\n          formValues = this.changeField(formValues, 'bymonthday', null); //default value\n          formValues = this.changeField(formValues, 'byweekday', [\n            startWeekday.nth(1),\n          ]); //default value\n          formValues = this.changeField(\n            formValues,\n            'monthOfTheYear',\n            startMonth,\n          ); //default value\n        }\n        break;\n      default:\n        break;\n    }\n    return formValues;\n  };\n\n  onChangeRule = (field, value) => {\n    var formValues = Object.assign({}, this.state.formValues);\n    formValues = this.changeField(formValues, field, value);\n\n    this.setState((prevState) => {\n      var rruleSet = prevState.rruleSet;\n      rruleSet = this.updateRruleSet(rruleSet, formValues, field, value);\n      return {\n        ...prevState,\n        rruleSet,\n        formValues,\n      };\n    });\n  };\n\n  exclude = (date) => {\n    let list = this.state.rruleSet.exdates().slice(0);\n    list.push(date);\n    this.onChangeRule('exdates', list);\n  };\n\n  undoExclude = (date) => {\n    let list = this.state.rruleSet.exdates().slice(0);\n    remove(list, (e) => {\n      return e.getTime() === date.getTime();\n    });\n    this.onChangeRule('exdates', list);\n  };\n\n  addDate = (date) => {\n    const moment = this.moment;\n    let all = concat(this.state.rruleSet.all(), this.state.rruleSet.exdates());\n\n    var simpleDate = moment(new Date(date)).startOf('day').toDate().getTime();\n    var exists = find(all, (e) => {\n      var d = moment(e).startOf('day').toDate().getTime();\n      return d === simpleDate;\n    });\n    if (!exists) {\n      let list = this.state.rruleSet.rdates().slice(0);\n      list.push(new Date(date));\n      this.onChangeRule('rdates', list);\n    }\n  };\n\n  save = () => {\n    var value = this.state.rruleSet.toString();\n    this.props.onChange(this.props.id, value);\n    this.close();\n  };\n\n  remove = () => {\n    this.props.onChange(this.props.id, null);\n    let rruleSet = new RRuleSet();\n    this.setState({\n      rruleSet: rruleSet,\n      formValues: this.getFormValues(rruleSet),\n    });\n  };\n\n  render() {\n    const { open, dimmer, rruleSet, formValues, RRULE_LANGUAGE } = this.state;\n\n    const {\n      id,\n      title,\n      required,\n      description,\n      error,\n      fieldSet,\n      intl,\n    } = this.props;\n\n    return (\n      <Form.Field\n        inline\n        required={required}\n        error={error.length > 0}\n        className={cx('recurrence-widget', description ? 'help' : '')}\n        id={`${fieldSet || 'field'}-${id}`}\n      >\n        <Grid>\n          <Grid.Row stretched>\n            <Grid.Column width=\"4\">\n              <div className=\"wrapper\">\n                <label htmlFor={`field-${id}`}>{title}</label>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"8\">\n              {rruleSet.rrules()[0] && (\n                <>\n                  <Label>\n                    {rruleSet.rrules()[0]?.toText(\n                      (t) => {\n                        return RRULE_LANGUAGE.strings[t];\n                      },\n                      RRULE_LANGUAGE,\n                      RRULE_LANGUAGE.dateFormatter,\n                    )}\n                  </Label>\n\n                  <Segment>\n                    <Occurences\n                      rruleSet={rruleSet}\n                      exclude={this.exclude}\n                      undoExclude={this.undoExclude}\n                      showTitle={false}\n                      editOccurences={false}\n                    />\n                  </Segment>\n                </>\n              )}\n              <div>\n                <Button\n                  basic\n                  disabled={this.props.isDisabled}\n                  color=\"blue\"\n                  className=\"edit-recurrence\"\n                  onClick={this.show('blurring')}\n                  type=\"button\"\n                  aria-label={intl.formatMessage(messages.editRecurrence)}\n                >\n                  <Icon\n                    name={editingSVG}\n                    size=\"20px\"\n                    title={intl.formatMessage(messages.editRecurrence)}\n                  />\n                </Button>\n                {this.props.value && (\n                  <Button\n                    basic\n                    color=\"pink\"\n                    className=\"remove-recurrence\"\n                    onClick={() => {\n                      this.remove();\n                    }}\n                    type=\"button\"\n                    aria-label={intl.formatMessage(messages.remove)}\n                  >\n                    <Icon\n                      name={trashSVG}\n                      size=\"20px\"\n                      title={intl.formatMessage(messages.remove)}\n                    />\n                  </Button>\n                )}\n              </div>\n              <Modal\n                dimmer={dimmer}\n                open={open}\n                onClose={this.close}\n                className=\"recurrence-form\"\n                closeIcon\n              >\n                <Modal.Header>\n                  {intl.formatMessage(messages.editRecurrence)}{' '}\n                </Modal.Header>\n                <Modal.Content scrolling>\n                  {rruleSet.rrules().length > 0 && (\n                    <Modal.Description>\n                      <Segment>\n                        <Form>\n                          <SelectWidget\n                            id=\"freq\"\n                            title={intl.formatMessage(messages.repeat)}\n                            getVocabulary={() => {}}\n                            getVocabularyTokenTitle={() => {}}\n                            choices={Object.keys(OPTIONS.frequences).map(\n                              (t) => {\n                                return [t, intl.formatMessage(messages[t])];\n                              },\n                            )}\n                            value={formValues.freq}\n                            onChange={this.onChangeRule}\n                          />\n                          {OPTIONS.frequences[formValues.freq].interval && (\n                            <IntervalField\n                              label={intl.formatMessage(messages.repeatEvery)}\n                              labelAfter={\n                                formValues.freq &&\n                                intl.formatMessage(\n                                  messages['interval_' + formValues.freq],\n                                )\n                              }\n                              value={formValues.interval}\n                              onChange={this.onChangeRule}\n                            />\n                          )}\n\n                          {/***** byday *****/}\n                          {OPTIONS.frequences[formValues.freq].byday && (\n                            <ByDayField\n                              label={intl.formatMessage(messages.repeatOn)}\n                              value={formValues.byweekday}\n                              onChange={this.onChangeRule}\n                            />\n                          )}\n\n                          {/***** bymonth *****/}\n                          {OPTIONS.frequences[formValues.freq].bymonth && (\n                            <ByMonthField\n                              label={intl.formatMessage(messages.repeatOn)}\n                              value={formValues.monthly}\n                              bymonthday={formValues.bymonthday}\n                              weekdayOfTheMonthIndex={\n                                formValues.weekdayOfTheMonthIndex\n                              }\n                              weekdayOfTheMonth={formValues.weekdayOfTheMonth}\n                              onChange={this.onChangeRule}\n                            />\n                          )}\n\n                          {/***** byyear *****/}\n                          {OPTIONS.frequences[formValues.freq].byyear && (\n                            <ByYearField\n                              label={intl.formatMessage(messages.repeatOn)}\n                              value={formValues.yearly}\n                              bymonthday={formValues.bymonthday}\n                              monthOfTheYear={formValues.monthOfTheYear}\n                              weekdayOfTheMonthIndex={\n                                formValues.weekdayOfTheMonthIndex\n                              }\n                              weekdayOfTheMonth={formValues.weekdayOfTheMonth}\n                              onChange={this.onChangeRule}\n                            />\n                          )}\n\n                          {/*-- ends after N recurrence or date --*/}\n                          <EndField\n                            value={formValues.recurrenceEnds}\n                            count={formValues.count}\n                            until={formValues.until}\n                            onChange={this.onChangeRule}\n                          />\n                        </Form>\n                      </Segment>\n                      <Segment>\n                        <Occurences\n                          rruleSet={rruleSet}\n                          exclude={this.exclude}\n                          undoExclude={this.undoExclude}\n                        />\n                      </Segment>\n                      <Segment>\n                        <Header as=\"h2\">\n                          {intl.formatMessage(messages.add_date)}\n                        </Header>\n\n                        <DatetimeWidget\n                          id=\"addDate\"\n                          title={intl.formatMessage(\n                            messages.select_date_to_add_to_recurrence,\n                          )}\n                          dateOnly={true}\n                          noPastDates={true}\n                          onChange={(id, value) => {\n                            this.addDate(value === '' ? undefined : value);\n                          }}\n                        />\n                      </Segment>\n                    </Modal.Description>\n                  )}\n                </Modal.Content>\n                <Modal.Actions>\n                  <Button\n                    className=\"save\"\n                    basic\n                    onClick={() => {\n                      this.save();\n                    }}\n                    aria-label={intl.formatMessage(messages.save)}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                </Modal.Actions>\n              </Modal>\n              {map(error, (message) => (\n                <Label key={message} basic color=\"red\" pointing>\n                  {message}\n                </Label>\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n          {description && (\n            <Grid.Row stretched>\n              <Grid.Column stretched width=\"12\">\n                <p className=\"help\">{description}</p>\n              </Grid.Column>\n            </Grid.Row>\n          )}\n        </Grid>\n      </Form.Field>\n    );\n  }\n}\n\nexport default compose(\n  injectLazyLibs(['moment']),\n  connect((state) => ({\n    lang: state.intl.locale,\n  })),\n  injectIntl,\n)(RecurrenceWidget);\n","/**\n * SelectInput component.\n * @module components/manage/Widgets/RecurrenceWidget/SelectInput\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport { find } from 'lodash';\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n/**\n * SelectInput component class.\n * @function SelectInput\n * @returns {string} Markup of the component.\n */\nconst SelectInput = ({ name, disabled, options, value, onChange }) => {\n  const inlineSelectStyles = {\n    ...customSelectStyles,\n    control: (styles, state) => ({\n      ...customSelectStyles.control(styles, state),\n      minWidth: '130px',\n    }),\n  };\n  const getDefaultValue = (choices, value) => {\n    const element = find(choices, (o) => o.value === value);\n    return element ? element : {};\n  };\n\n  return (\n    <Select\n      isDisabled={disabled}\n      id={name}\n      name={name}\n      className=\"react-select-container\"\n      classNamePrefix=\"react-select\"\n      defaultValue={getDefaultValue(options, value)}\n      value={getDefaultValue(options, value)}\n      options={options}\n      styles={inlineSelectStyles}\n      theme={selectTheme}\n      components={{\n        DropdownIndicator,\n        Option,\n      }}\n      onChange={(data) => onChange(name, data.value)}\n    />\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSelectInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  disabled: PropTypes.bool,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nSelectInput.defaultProps = {\n  name: 'select',\n  options: [],\n  disabled: false,\n  value: null,\n  onChange: null,\n};\n\nexport default SelectInput;\n","import { RRule } from 'rrule';\nimport { defineMessages } from 'react-intl';\n\nexport const Days = {\n  MO: RRule.MO,\n  TU: RRule.TU,\n  WE: RRule.WE,\n  TH: RRule.TH,\n  FR: RRule.FR,\n  SA: RRule.SA,\n  SU: RRule.SU,\n};\n\nexport const WEEKLY_DAYS = [Days.MO, Days.TU, Days.WE, Days.TH, Days.FR];\nexport const MONDAYFRIDAY_DAYS = [Days.MO, Days.FR];\n\nexport const FREQUENCES = {\n  DAILY: 'daily',\n  MONDAYFRIDAY: 'mondayfriday',\n  WEEKDAYS: 'weekdays',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly',\n};\n\nexport const OPTIONS = {\n  frequences: {\n    [FREQUENCES.DAILY]: { rrule: RRule.DAILY, interval: true },\n    [FREQUENCES.MONDAYFRIDAY]: { rrule: RRule.WEEKLY },\n    [FREQUENCES.WEEKDAYS]: { rrule: RRule.WEEKLY },\n    [FREQUENCES.WEEKLY]: { rrule: RRule.WEEKLY, interval: true, byday: true },\n    [FREQUENCES.MONTHLY]: {\n      rrule: RRule.MONTHLY,\n      interval: true,\n      bymonth: true,\n    },\n    [FREQUENCES.YEARLY]: { rrule: RRule.YEARLY, interval: true, byyear: true },\n  },\n};\n\nexport const toISOString = (date) => {\n  return date.toISOString().split('T')[0];\n};\n\nexport const rrulei18n = (intl, moment, lang) => {\n  moment.locale(lang);\n\n  const messages = defineMessages({\n    every: { id: 'rrule_every', defaultMessage: 'every' },\n    until: { id: 'rrule_until', defaultMessage: 'until' },\n    for: { id: 'rrule_for', defaultMessage: 'for' },\n    time: { id: 'rrule_time', defaultMessage: 'time' },\n    times: { id: 'rrule_times', defaultMessage: 'times' },\n    '(~ approximate)': {\n      id: 'rrule_approximate',\n      defaultMessage: '(~approximate)',\n    },\n    hour: { id: 'rrule_hour', defaultMessage: 'hour' },\n    hours: { id: 'rrule_hours', defaultMessage: 'hours' },\n    minutes: {\n      id: 'rrule_minutes',\n      defaultMessage: 'minutes',\n    },\n    weekdays: {\n      id: 'rrule_weekdays',\n      defaultMessage: 'weekdays',\n    },\n    weekday: {\n      id: 'rrule_weekday',\n      defaultMessage: 'weekday',\n    },\n    day: { id: 'rrule_day', defaultMessage: 'day' },\n    days: { id: 'rrule_days', defaultMessage: 'days' },\n    in: { id: 'rrule_in', defaultMessage: 'in' },\n    week: { id: 'rrule_week', defaultMessage: 'week' },\n    weeks: { id: 'rrule_weeks', defaultMessage: 'weeks' },\n    month: {\n      id: 'rrule_month',\n      defaultMessage: 'month',\n    },\n    months: {\n      id: 'rrule_months',\n      defaultMessage: 'months',\n    },\n    on: { id: 'rrule_on', defaultMessage: 'on' },\n    year: { id: 'rrule_year', defaultMessage: 'year' },\n    years: { id: 'rrule_years', defaultMessage: 'years' },\n    'on the': {\n      id: 'rrule_on the',\n      defaultMessage: 'on the',\n    },\n    the: { id: 'rrule_the', defaultMessage: 'the' },\n    and: { id: 'rrule_and', defaultMessage: 'and' },\n    or: { id: 'rrule_or', defaultMessage: 'or' },\n    at: { id: 'rrule_at', defaultMessage: 'at' },\n    last: { id: 'rrule_last', defaultMessage: 'last' },\n    st: { id: 'rrule_st', defaultMessage: 'st' },\n    nd: { id: 'rrule_nd', defaultMessage: 'nd' },\n    rd: { id: 'rrule_rd', defaultMessage: 'rd' },\n    th: { id: 'rrule_th', defaultMessage: 'th' },\n    dateFormat: {\n      id: 'rrule_dateFormat',\n      defaultMessage: '[month] [day], [year]',\n    },\n  });\n\n  let strings = {};\n  Object.keys(messages).map(\n    (k) => (strings[k] = intl.formatMessage(messages[k])),\n  );\n\n  let dateFormat = strings.dateFormat\n    .replace(new RegExp('\\\\[', 'g'), '${')\n    .replace(new RegExp('\\\\]', 'g'), '}');\n\n  const dateFormatter = (year, month, day) =>\n    dateFormat\n      .replace(/\\$\\{year\\}/g, year)\n      .replace(/\\$\\{month\\}/g, month)\n      .replace(/\\$\\{day\\}/g, day);\n  const LANGUAGE = {\n    dayNames: moment.weekdays(),\n    monthNames: moment.months(),\n    strings: strings,\n    dateFormatter: dateFormatter,\n  };\n  return LANGUAGE;\n};\n","/**\n * WeekdayOfTheMonthField component.\n * @module components/manage/Widgets/RecurrenceWidget/WeekdayOfTheMonthField\n */\n\nimport React from 'react';\nimport { map } from 'lodash';\nimport { Days } from './Utils';\nimport SelectInput from './SelectInput';\nimport { Form } from 'semantic-ui-react';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\n\n/**\n * WeekdayOfTheMonthField component class.\n * @function WeekdayOfTheMonthField\n * @returns {string} Markup of the component.\n */\n\nconst WeekdayOfTheMonthField = (props) => {\n  const { disabled = false, moment: momentlib } = props;\n  const lang = useSelector((state) => state.intl.locale);\n\n  const moment = momentlib.default;\n  moment.locale(lang);\n\n  const weekdayOfTheMonthList = [\n    ...map(Object.keys(Days), (d) => ({\n      value: Days[d].weekday,\n      label: moment.weekdays(Days[d].weekday + 1),\n    })),\n  ];\n\n  return (\n    <Form.Field disabled={disabled}>\n      <SelectInput\n        name=\"weekdayOfTheMonth\"\n        options={weekdayOfTheMonthList}\n        {...props}\n      />\n    </Form.Field>\n  );\n};\n\nexport default injectLazyLibs(['moment'])(WeekdayOfTheMonthField);\n","/**\n * WeekdayOfTheMonthIndexField component.\n * @module components/manage/Widgets/RecurrenceWidget/WeekdayOfTheMonthIndexField\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { map } from 'lodash';\nimport { Form } from 'semantic-ui-react';\nimport SelectInput from './SelectInput';\n\n/**\n * WeekdayOfTheMonthIndexField component class.\n * @function WeekdayOfTheMonthIndexField\n * @returns {string} Markup of the component.\n */\n\nconst messages = defineMessages({\n  bymonthDayNumber: { id: 'Weeek day of month', defaultMessage: 'The' },\n\n  first: { id: 'First', defaultMessage: 'First' },\n  second: { id: 'Second', defaultMessage: 'Second' },\n  third: { id: 'Third', defaultMessage: 'Third' },\n  fourth: { id: 'Fourth', defaultMessage: 'Fourth' },\n  last: { id: 'Last', defaultMessage: 'Last' },\n});\n\nconst ORDINAL_NUMBERS = {\n  '1': 'first',\n  '2': 'second',\n  '3': 'third',\n  '4': 'fourth',\n  '-1': 'last',\n};\n\nclass WeekdayOfTheMonthIndexField extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    disabled: PropTypes.bool,\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    disabled: false,\n    value: null,\n    onChange: null,\n  };\n\n  render() {\n    const { intl, disabled } = this.props;\n    const weekdayOfTheMonthIndexList = [\n      ...map(Object.keys(ORDINAL_NUMBERS), (option) => ({\n        value: parseInt(option),\n        label: intl.formatMessage(messages[ORDINAL_NUMBERS[option]]),\n      })),\n    ];\n    return (\n      <>\n        <Form.Field disabled={disabled}>\n          {intl.formatMessage(messages.bymonthDayNumber)}\n        </Form.Field>\n\n        <Form.Field disabled={disabled}>\n          <SelectInput\n            name=\"weekdayOfTheMonthIndex\"\n            options={weekdayOfTheMonthIndexList}\n            {...this.props}\n          />\n        </Form.Field>\n      </>\n    );\n  }\n}\n\nexport default injectIntl(WeekdayOfTheMonthIndexField);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AADA;AANA;AADA;AADA;AA2BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAVA;AADA;AAeA;AAAA;AAAA;AAAA;AAnBA;AAyBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AADA;AAWA;AACA;AACA;AAHA;AAXA;AAiBA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AADA;AAYA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAHA;AAlBA;AAlBA;AANA;AADA;AADA;AAuDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AADA;AAYA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AAHA;AAnBA;AAyBA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AADA;AAYA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AA5BA;AA1BA;AANA;AADA;AADA;AA0EA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AADA;AAOA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AADA;AAUA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AATA;AADA;AAaA;AAAA;AAAA;AA3BA;AA+BA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AADA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAZA;AAhCA;AARA;AADA;AADA;AAwEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AATA;AAWA;AAAA;AAZA;AADA;AANA;AADA;AADA;AA4BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AADA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAzBA;AACA;AA8BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AATA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AATA;AAfA;AAFA;AAmCA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAHA;AArCA;AAmDA;AAEA;AACA;AAAA;AADA;AAzDA;AANA;AA0EA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpNA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAxEA;AA8EA;AAcA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AA2DA;AACA;AACA;AA7DA;AA8DA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AA/EA;AAiFA;AAGA;AACA;AArFA;AAuFA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA1FA;AA0FA;AAAA;AACA;AA3FA;AA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1GA;AA4GA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArHA;AAyvEA;AAyEA;AACA;AACA;AAAA;AACA;AACA;AA1NA;AA4NA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA9PA;AAgQA;AACA;AAMA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAxRA;AAyRA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AApBA;AACA;AAsBA;AACA;AACA;AA7TA;AA8TA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAIA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AA3BA;AACA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAzIA;AACA;AA0IA;AACA;AACA;AAneA;AAqeA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AAlfA;AAofA;AACA;AACA;AACA;AACA;AAxfA;AA0fA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAhgBA;AAkgBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAhhBA;AAkhBA;AACA;AACA;AACA;AACA;AAthBA;AAwhBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA5hBA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AAOA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAueA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAEA;AACA;AAGA;AACA;AAJA;AAUA;AAEA;AACA;AACA;AACA;AACA;AALA;AADA;AAXA;AAsBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAHA;AATA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAHA;AAVA;AAjBA;AAoCA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAXA;AAeA;AACA;AAMA;AACA;AATA;AAgBA;AACA;AACA;AAHA;AAUA;AACA;AACA;AACA;AAGA;AACA;AARA;AAeA;AACA;AACA;AACA;AACA;AAGA;AACA;AATA;AAeA;AACA;AACA;AACA;AAJA;AAnEA;AADA;AA4EA;AAEA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAAA;AAAA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AATA;AALA;AApFA;AAFA;AA0GA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAJA;AARA;AADA;AApHA;AAuIA;AAAA;AAAA;AAAA;AAAA;AAlMA;AANA;AA+MA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AADA;AAhNA;AAPA;AAgOA;AACA;AAlzBA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAPA;AAuBA;AACA;AACA;AACA;AAJA;AACA;AA6xBA;AAGA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACv8BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAFA;AAFA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAfA;AAkBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAVA;AADA;AAerDA;AA2DA;AACA;AAIA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAFA;AAMA;AACA;AAAA;AAEA;AACA;AAFA;AADA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAIA;AAAA;AAEA;AACA;AAFA;AADA;AALA;AAcA;AACA;AA/CA;AACA;AADA;AAOA;AACA;AACA;AAHA;AACA;AAPA;AAkBA;AACA;AACA;AAHA;AACA;AA+BA;;;;A","sourceRoot":""}